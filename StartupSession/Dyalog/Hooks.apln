:Namespace Hooks
    ⎕ML←1 ⋄ ⎕IO←1

    Num←2|⎕DR

      Handle←{ ⍝ Generate hash using dfns.chksum
          9{⎕IO ⎕ML←0 1                           ⍝ Simple ⍺-digit checksum.
     
              bvec←{                              ⍝ byte-vector.
                  sub←{(⍴⍵)bvec,⍵}                ⍝ bvec of sub-item.
                  0∊⍴⍵:⍺ pref sub⊃⍵               ⍝ null:      prototypical item.
                  (⍺≡⍬)∧isref⊃⍵:⍬                 ⍝ ref:       ignored.
                  ⍵≡,⎕NULL:⍬                      ⍝ ⎕null:     ignored.
                  6=10|⎕DR ⍵:⍺ pref↑,/sub¨⍵       ⍝ nested:    cat of sub-vectors.
                  ⍺ pref bytes ifdr(11∘≠)⎕UCS ifdr(~2∘|)⍵ ⍝ bytes of array.
              }
     
              ifdr←{⍺⍺⍣(⍵⍵ ⎕DR ⍵)⊢⍵}             ⍝ apply fn for all other types
              isref←{9=⎕NC'⍵'}                    ⍝ namespace reference.
              bytes←{256|83 ⎕DR ⍵}                ⍝ data bytes.
              pref←{(bytes ⍺,¯1),⍵}               ⍝ prefixed shape vector.
              wsum←{⍵+.×1+⍳⍴⍵}                    ⍝ weighted sum.
     
              ⍺←6 ⋄ (10*⍺)|wsum(⍴⍵)bvec,⍵         ⍝ ⍺-digit weighted sum of byte-vector.
          }⍤1⊢⍵
      }

    ∇ {handle}←Register efp ⍝ ... prioritised callback
      ⍝ Argument must be (event fn priority) or matrix of such rows
      ;event
     
      :If 2=≢⍴efp ⍝ mat
          :Trap 11
              handle←Register⍤1⊢efp ⍝ process rows
          :Else
              →ERROR
          :EndTrap
     
      :ElseIf ~326∊⎕DR¨efp ⍝no refs
      :AndIf 0 0 1≡Num¨efp ⍝ char char num
      :AndIf 1∧.≥≢∘⍴¨efp ⍝ all scal/vecs
      :AndIf 1∧.≤≢¨efp ⍝ all non-empty
          efp←,¨efp
          :Trap 11
              Init event←⊃efp
          :Case 11
              ⎕SIGNAL ⎕DMX.(⊂('EN'EN)('Message'Message))
          :EndTrap
          ⍎event,'←Norm ',event,'⍪1↓efp'
          handle←Handle efp
     
      :Else
     ERROR:⎕SIGNAL⊂('EN' 11)('Message' 'Argument must be (event fn priority) or matrix of such rows')
      :EndIf
    ∇

    ∇ {removed}←Deregister handle ⍝ ... prioritised callback
      ⍝ Handle must be integer(s)
      ;events;event;remove;kept;hooks
     
      :If ~1 3∊⍨⎕DR handle
          events←⎕A ⎕NL ¯2 ⍝ all globals that begin with capital letter
          removed←0 3⍴⊂''
          :For event :In events
              Init event
              hooks←(⊂event),⍎event
              remove←handle∊⍨Handle hooks
              removed⍪←remove⌿hooks
              kept←(~remove)⌿0 1↓hooks
              ⍎event,'←kept'
              Init event
          :EndFor
          removed←,⍣(⍬≡⍴handle)⊢removed
     
      :Else
          ⎕SIGNAL⊂('EN' 11)('Message' 'Handle(s) must be numeric')
      :EndIf
    ∇

    ∇ {exists}←{create}Init event ⍝ global var for event
      ⍝ Event must be character vector(s) in correct case
      ⍝ create:0 to leave undefined if missing
      ;hooks;val;current;err;exists
     
      :If 900⌶⍬  ⍝monadic
          create←1
      :EndIf
     
      :If 2=|≡event
          :Trap 11
              exists←create Init¨event
          :Else
              →ERROR
          :EndTrap
     
      :ElseIf ~Num event  ⍝ char
      :AndIf 1≥≢⍴event  ⍝ scal/vector
      :AndIf ⎕A∊⍨⊃event  ⍝ capital
      :AndIf ¯1≠⎕NC event  ⍝ id
     
          err←1
          val←0 2⍴'' 0
          :If exists←2=⊃⎕NC event  ⍝ exists
              current←⍎event
          :AndIf ~0∊⍴current
     
              :If ~326∊⎕DR¨∊current  ⍝ no refs
              :AndIf ~0∊1≥≢∘⍴¨⊆current  ⍝ no high-ranks
     
                  :Select ≢⍴current ⍝ rank
                  :CaseList 0 1  ⍝ scal/vec
     
                      :If 2≥|≡current  ⍝ scal/vec of or simple char scal/vec
                          val←0,⍨⍪⊆,current
                          err←0
                      :EndIf
     
                  :Case 2  ⍝ mat
     
                      :If (0 1∘⊣⍤1≡Num¨)current  ⍝ (char num) rows
                          val←current
                          err←0
                      :EndIf
     
                  :EndSelect
              :EndIf
              :If err
                  ⎕←' *** "',(⍕⎕THIS),'.',event,'" must be 2-column matrix of (fn priority) pairs'
              :EndIf
          :EndIf
     
          :If exists
          :OrIf exists←create
              ⍎event,'←Norm val'
          :EndIf
      :Else
     ERROR:⎕SIGNAL⊂('EN' 11)('Message' 'Event must be character vector(s) in correct case')
      :EndIf
    ∇

    Norm←{∪⍵⌷⍨⊂⍋⌽⍵}

    ∇ hooks←Registered event ⍝ report callbacks
      ⍝ Event must be character vector(s) in correct case
      ;events
     
      events←⎕A ⎕NL ¯2
      0 Init events
      :If ⍬''∊⍨⊂event
          event←events
      :EndIf
      :If 2=|≡event
          :If 0∊⍴event
              hooks←0 3⍴'' '' 0
          :Else
              hooks/¨⍨←×≢hooks←⊃⍪⌿(⊂,Registered)¨event
          :EndIf
      :Else
          :If events∊⍨⊂event
              hooks←Norm⍎event
          :Else
              hooks←0 2⍴⊂''
          :EndIf
      :EndIf
    ∇

:EndNamespace
